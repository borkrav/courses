------------------------------TEST 1------------------------------

INPUT:

./soda noSuchFile.config -1
./soda noSuchFile.config 3
./soda smallTest.config -1
./soda smallTest.config 5

smallTest.config:

SodaCost                   1    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents                1    # number of students to create
MaxPurchases               1    # maximum number of bottles a student purchases
NumVendingMachines         1    # number of vending machines
MaxStockPerFlavour         5    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour       6    # maximum number of bottles of each flavour generated by the bottling
                                #    plant per production run
TimeBetweenShipments       5    # length of time between shipment pickup
ParentalDelay             20    # length of time between new deposits of funds
NumCouriers                1    # maximum number of couriers in the pool


EXPLANATION:
Tests that check the error handling of the input, and a small test that checks overall program correctness. The first 3 tests should return an error message, the last test shoud return reasonable output

OUTPUT:
Script started on Mon 08 Apr 2013 04:51:01 PM EDT
bkravche@linux024:~/Desktop/soda$ ./soda noSuchFile.config -1
Usage: ./soda [ config-file [ random-seed (> 0) ] ]
bkravche@linux024:~/Desktop/soda$ ./soda noSuchFile.config 3
Error: could not open input file "noSuchFile.config"
bkravche@linux024:~/Desktop/soda$ ./soda smallTest.config -1
Usage: ./soda [ config-file [ random-seed (> 0) ] ]
bkravche@linux024:~/Desktop/soda$ ./soda smallTest.config 5
Parent	WATOff	Names	Truck	Plant	Stud0	Mach0	Cour0	
*******	*******	*******	*******	*******	*******	*******	*******
S	S	S				S1	S	
	C0,5	R0	S	S	S2,1			
	W		P0	P			t0,5	
				G11				
			P11	P				
			d0,11			r		
			U0,9					
D0,3			D0,0	G20		R		
			P20	P				
			d0,20			r		
			U0,1					
			D0,12	G14		R		
			P14	P				
			d0,14			r		
			U0,0					
			D0,13	G9		R		
			P9	P				
			d0,9			r		
			U0,0					
D0,2		N0,0	D0,9	G18	V0	R	T0,5	
			P18	P				
			d0,18			r		
			U0,0					
			D0,18	G21		R		
					B4	B2,4		
...	...	...	...	...	F	...	...
...	...	...	...	F	...	...	...
...	...	...	F	...	...	...	...
...	...	...	...	...	...	F	...
D0,3								
...	...	F	...	...	...	...	...
...	F	...	...	...	...	...	...
...	...	...	...	...	...	...	...
D0,3								
F	...	...	...	...	...	...	...
***********************
bkravche@linux024:~/Desktop/soda$ exit
exit

Script done on Mon 08 Apr 2013 04:51:13 PM EDT


ANALYSIS:
The first 3 tests gave errors, which is the correct output. The last test gave output that matches the problem specifications. 

------------------------------TEST 2------------------------------

INPUT:
./run.sh smallTest.config
./run.sh largeTest.config

largeTest.config:
SodaCost                   5    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents                50    # number of students to create
MaxPurchases               10    # maximum number of bottles a student purchases
NumVendingMachines         30    # number of vending machines
MaxStockPerFlavour         3    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour       20    # maximum number of bottles of each flavour generated by the bottling
                                #    plant per production run
TimeBetweenShipments       10    # length of time between shipment pickup
ParentalDelay              3    # length of time between new deposits of funds
NumCouriers                10    # maximum number of couriers in the pool

run.sh:
for i in {1..100..1}
do
   ./soda $1 2> err.log
done

EXPLANATION:
A general stability test, runs each input 100 times with different seeds, ensures there are no errors, deadlocks, segmentation faults or memory issues. The resulting err.log files should be empty.

OUTPUT
Script started on Mon 08 Apr 2013 05:00:10 PM EDT
bkravche@linux024:~/Desktop/soda$ ./run.sh smallTest.config
...
output omitted
...
bkravche@linux024:~/Desktop/soda$ cat err.log
bkravche@linux024:~/Desktop/soda$ ./run.sh largeTest.config
...
output omitted
...
bkravche@linux024:~/Desktop/soda$ cat err.log
bkravche@linux024:~/Desktop/soda$ exit
exit

Script done on Mon 08 Apr 2013 05:08:14 PM EDT

ANALYSIS:
Both tests yielded an empty error log, which means, wihth high probability, that the solution is stable

------------------------------TEST 3------------------------------

INPUT:
./soda input.config

SodaCost                   1    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents                1    # number of students to create
MaxPurchases               1    # maximum number of bottles a student purchases
NumVendingMachines         1    # number of vending machines
MaxStockPerFlavour         1    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour       1    # maximum number of bottles of each flavour generated by the bottling
                                #    plant per production run
TimeBetweenShipments       1    # length of time between shipment pickup
ParentalDelay              1    # length of time between new deposits of funds
NumCouriers                1    # maximum number of couriers in the pool

EXPLANATION:
This is an accuracy test, events should happen in the correct order

OUTPUT:
Script started on Mon 08 Apr 2013 06:09:52 PM EDT
bkravche@linux028:~/Desktop/soda$ ./soda input.config 
Parent	WATOff	Names	Truck	Plant	Stud0	Mach0	Cour0	
*******	*******	*******	*******	*******	*******	*******	*******
S	S	S				S1	S	
D0,3		R0						
D0,2								
D0,2	C0,5		S	S	S0,1			
D0,1								
D0,2	W		P0	P			t0,5	
D0,3							T0,5	
D0,3				G2				
D0,1			P2	P				
			d0,2			r		
			U0,2					
D0,1		N0,0	D0,0		V0			
D0,1				G3		R		
D0,3								
D0,2					B4	B0,0		
...	...	...	...	...	F	...	...
D0,3								
D0,2								
...	...	...	...	F	...	...	...
D0,1								
D0,1								
D0,3								
D0,2								
D0,1								
D0,2								
...	...	...	F	...	...	...	...
D0,3								
D0,3								
...	...	...	...	...	...	F	...
D0,2								
D0,1								
...	...	F	...	...	...	...	...
D0,1								
D0,1								
...	F	...	...	...	...	...	...
D0,2								
D0,2								
...	...	...	...	...	...	...	...
D0,1								
D0,3								
F	...	...	...	...	...	...	...
***********************
bkravche@linux028:~/Desktop/soda$ exit
exit

Script done on Mon 08 Apr 2013 06:10:02 PM EDT

ANALYSIS:
The events happen in the order specified in the assignment description. Therefore this test passed.


------------------------------TEST 4------------------------------

INPUT:
./soda input.config

SodaCost                   1    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents                1    # number of students to create
MaxPurchases               8    # maximum number of bottles a student purchases
NumVendingMachines         3    # number of vending machines
MaxStockPerFlavour         15    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour       30    # maximum number of bottles of each flavour generated by the bottling
                                #    plant per production run
TimeBetweenShipments       5    # length of time between shipment pickup
ParentalDelay             20    # length of time between new deposits of funds
NumCouriers                1    # maximum number of couriers in the pool

EXPLANATION:
This tests very little contension for resources. So student should just buy everything and finish with very little waiting

OUTPUT:
Script started on Mon 08 Apr 2013 05:57:26 PM EDT
bkravche@linux028:~/Desktop/soda$ ./soda input.config 
Parent	WATOff	Names	Truck	Plant	Stud0	Mach0	Mach1	Mach2	Cour0	
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
S	S	S				S1			S	
		R0					S1	S1		
		R1								
	C0,5	R2	S	S	S2,5					
D0,2	W		P0	P					t0,5	
				G79						
			P79	P						
			d0,79			r				
			U0,6							
			D0,25			R				
			d1,25				r			
			U1,35							
			D1,0	G43			R			
			P43	P						
			d0,43			r				
			U0,3							
			D0,40			R				
			d1,40				r			
			U1,21							
			D1,26				R			
			d2,26					r		
			U2,43							
D0,1			D2,9	G55				R		
			P55	P						
			d0,55			r				
			U0,2							
			D0,54			R				
			d1,54				r			
			U1,15							
			D1,48				R			
			d2,48					r		
			U2,23							
			D2,28	G46				R		
			P46	P						
			d0,46			r				
			U0,0							
			D0,44			R				
			d1,44				r			
			U1,9							
			D1,38				R			
			d2,38					r		
			U2,15							
			D2,30	G59				R		
			P59	P						
			d0,59			r				
			U0,0							
D0,1			D0,59			R				
			d1,59				r			
			U1,0							
			D1,50				R			
			d2,50					r		
			U2,7							
			D2,42	G61				R		
			P61	P						
			d0,61			r				
			U0,0							
			D0,61			R				
			d1,61				r			
			U1,0							
			D1,61				R			
			d2,61					r		
			U2,0							
D0,1		N0,0	D2,54	G69	V0			R	T0,5	
			P69	P						
			d0,69			r				
			U0,0							
			D0,69			R				
			d1,69				r			
			U1,0							
			D1,69		B4	B2,14	R			
			d2,69					r		
			U2,0							
			D2,69	G42	B3	B2,13		R		
			P42	P						
			d0,42			r				
			U0,0							
			D0,40			R				
			d1,40				r			
			U1,0							
D0,1			D1,40				R			
			d2,40					r		
			U2,0							
			D2,40	G66	B2	B2,14		R		
			P66	P	B1	B2,13				
			d0,66			r				
			U0,0							
			D0,64			R				
			d1,64				r			
			U1,0							
			D1,64				R			
			d2,64					r		
			U2,0							
			D2,64	G87	B0	B2,14		R		
...	...	...	...	...	F	...	...	...	...
...	...	...	...	F	...	...	...	...	...
D0,2										
...	...	...	F	...	...	...	...	...	...
...	...	...	...	...	...	F	...	...	...
...	...	...	...	...	...	...	F	...	...
...	...	...	...	...	...	...	...	F	...
...	...	F	...	...	...	...	...	...	...
...	F	...	...	...	...	...	...	...	...
...	...	...	...	...	...	...	...	...	...
D0,2										
F	...	...	...	...	...	...	...	...	...
***********************
bkravche@linux028:~/Desktop/soda$ exit
exit

Script done on Mon 08 Apr 2013 05:57:34 PM EDT

EXPLANATION:
The student only obtained a vending machine once, and could buy all his drinks immediately when he wanted to. Therefore, this test passed.


------------------------------TEST 5------------------------------

INPUT:
./soda input.config

SodaCost                   1    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents                3    # number of students to create
MaxPurchases               4    # maximum number of bottles a student purchases
NumVendingMachines         3    # number of vending machines
MaxStockPerFlavour         1    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour       2    # maximum number of bottles of each flavour generated by the bottling
                                #    plant per production run
TimeBetweenShipments       5    # length of time between shipment pickup
ParentalDelay             20    # length of time between new deposits of funds
NumCouriers                1    # maximum number of couriers in the pool

EXPLANATION:
This tests lots of contension between students. There is very little resources available so students spin vending machines

OUTPUT:
Script started on Mon 08 Apr 2013 06:05:25 PM EDT
bkravche@linux028:~/Desktop/soda$ ./soda input.config 
Parent	WATOff	Names	Truck	Plant	Stud0	Stud1	Stud2	Mach0	Mach1	Mach2	Cour0	
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
S	S	S						S1			S	
		R0							S1	S1		
		R1										
	C0,5	R2	S	S	S2,4	S1,4	S2,3					
	W										t0,5	
	C1,5		P0	P								
	C2,5			G4								
			P4	P								
			d0,4					r				
			U0,2									
D0,2			D0,2					R				
			d1,2						r			
			U1,2									
			D1,0	G2					R			
			P2	P								
			d0,2					r				
			U0,2									
			D0,2					R				
			d1,2						r			
			U1,2									
			D1,2						R			
			d2,2							r		
			U2,3									
D0,2			D2,1	G8						R		
			P8	P								
			d0,8					r				
			U0,0									
			D0,6					R				
			d1,6						r			
			U1,0									
			D1,4						R			
			d2,4							r		
			U2,2									
			D2,3	G3						R		
			P3	P								
			d0,3					r				
			U0,0									
			D0,3					R				
			d1,3						r			
			U1,0									
			D1,3						R			
			d2,3							r		
			U2,1									
D2,3			D2,2	G3						R		
			P3	P								
			d0,3					r				
			U0,0									
			D0,3					R				
			d1,3						r			
			U1,0									
			D1,3						R			
			d2,3							r		
			U2,1									
			D2,3	G4						R		
			P4	P								
			d0,4					r				
			U0,0									
			D0,4					R				
			d1,4						r			
			U1,0									
D2,3			D1,4						R			
			d2,4							r		
			U2,0									
			D2,3	G4						R		
			P4	P								
			d0,4					r				
			U0,0									
			D0,4					R				
			d1,4						r			
			U1,0									
			D1,4						R			
			d2,4							r		
			U2,0									
			D2,4	G5						R		
			P5	P								
			d0,5					r				
			U0,0									
			D0,5					R				
			d1,5						r			
			U1,0									
			D1,5						R			
			d2,5							r		
			U2,0									
D2,2			D2,5	G4						R		
			P4	P								
			d0,4					r				
			U0,0									
			D0,4					R				
			d1,4						r			
			U1,0									
			D1,4						R			
			d2,4							r		
			U2,0									
D0,3			D2,4	G4						R	T0,5	
			P4	P								
			d0,4					r				
			U0,0									
	W		D0,4					R			t1,5	
			d1,4						r			
			U1,0									
		N0,0	D1,4		V0				R			
			d2,4							r		
			U2,0									
			D2,4	G1	B4			B2,0		R		
			P1	P								
			d0,1					r				
			U0,1									
			D0,1					R				
			d1,1						r			
			U1,0									
		N0,1	D1,1		V1				R			
			d2,1							r		
			U2,0									
		N0,2	D2,1	G4	B3				B2,0	R		
					V2					B2,0		
D0,3			P4	P	B2							
			d0,4					r				
			U0,1									
			D0,4					R				
			d1,4						r			
			U1,1									
		N0,0	D1,4		V0				R			
			d2,4							r		
			U2,1									
		N0,1	D2,4	G2	V1					R		
		N0,2			V2							
		N0,0			V0							
		N0,1			V1							
		N0,2			V2							
D0,1		N0,0	P2	P	V0							
			d0,2					r				
			U0,1									
		N0,1	D0,2		V1			R				
			d1,2						r			
			U1,1									
		N0,2	D1,2		V2				R			
			d2,2							r		
			U2,1									
		N0,0	D2,2	G7	V0					R		
		N0,1	P7	P	V1							
			d0,7					r				
			U0,0									
		N0,2	D0,6		V2			R				
			d1,6						r			
			U1,1									
		N0,0	D1,6		V0			B2,0				
					B1							
...	...	...	...	...	F	...	...	...	...	...	...
			d2,6						R	r		
			U2,1									
			D2,6	G2						R		
			P2	P								
			d0,2					r				
			U0,1									
			D0,2					R				
			d1,2						r			
			U1,1									
D1,2			D1,2						R			
			d2,2							r		
			U2,1									
			D2,2	G4						R		
			P4	P								
			d0,4					r				
			U0,0									
			D0,3					R				
			d1,3						r			
			U1,0									
			D1,2						R			
			d2,2							r		
			U2,1									
D1,3	W		D2,2	G3						R	T1,5	
											t2,5	
		N1,1	P3	P		V1					T2,5	
			d0,3					r				
			U0,0									
		N2,2	D0,3				V2	R				
			d1,3						r			
			U1,0									
			D1,3						R			
			d2,3							r		
			U2,1									
			D2,3	G4		B4			B1,0	R		
			P4	P								
			d0,4					r				
			U0,0									
		N2,0	D0,4				V0	R				
			d1,4						r			
			U1,1									
			D1,4				B4	B2,0	R			
			d2,4							r		
			U2,1									
D0,2		N1,2	D2,4	G5		V2				R		
			P5	P		B3				B1,0		
			d0,5					r				
			U0,0									
			D0,4					R				
			d1,4						r			
			U1,0									
			D1,3						R			
			d2,3							r		
			U2,1									
		N1,0	D2,2	G4		V0	B3	B2,0		R		
		N1,1				B2		B1,0				
						V1			B1,0			
						B1						
...	...	...	...	...	...	F	...	...	...	...	...
		N2,1					V1		B2,0			
							B2					
...	...	...	...	...	...	...	F	...	...	...	...
...	...	...	...	F	...	...	...	...	...	...	...
...	...	...	F	...	...	...	...	...	...	...	...
D2,3												
...	...	...	...	...	...	...	...	F	...	...	...
...	...	...	...	...	...	...	...	...	F	...	...
...	...	...	...	...	...	...	...	...	...	F	...
...	...	F	...	...	...	...	...	...	...	...	...
...	F	...	...	...	...	...	...	...	...	...	...
...	...	...	...	...	...	...	...	...	...	...	...
D2,3												
F	...	...	...	...	...	...	...	...	...	...	...
***********************
bkravche@linux028:~/Desktop/soda$ exit
exit

Script done on Mon 08 Apr 2013 06:05:29 PM EDT

EXPLANATION:
There is clearly lots of contension, students continuously select new vending machines, and one of them finished in the middle before two others. Therefore the solution correctly handles contension.


